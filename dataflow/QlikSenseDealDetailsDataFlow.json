{
	"name": "QlikSenseDealDetailsDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "QlikSenseDealDetails",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "QlikSenseDealDetailsSQL",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1",
					"description": "Universal dolar sign removal from all cells"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Store as string,",
				"          {Deal No} as string,",
				"          {Deal Type} as string,",
				"          {Sale Type} as string,",
				"          Date as string,",
				"          Status as string,",
				"          Bank as string,",
				"          {Stock No} as string,",
				"          {Yr Make Model} as string,",
				"          Miles as string,",
				"          Customer as string,",
				"          {Sales ()} as string,",
				"          {Financed Amount ()} as string,",
				"          {RSV $ ()} as string,",
				"          {VSC # ()} as string,",
				"          {VSC % ()} as string,",
				"          {VSC $ ()} as string,",
				"          {VSC $ PP ()} as string,",
				"          {PPM # ()} as string,",
				"          {PPM % ()} as string,",
				"          {PPM $ ()} as string,",
				"          {PPM $ PP ()} as string,",
				"          {GAP # ()} as string,",
				"          {GAP $ ()} as string,",
				"          {GAP % ()} as string,",
				"          {GAP $ PP ()} as string,",
				"          {APPEAR # ()} as string,",
				"          {APPEAR $ ()} as string,",
				"          {APPEAR % ()} as string,",
				"          {APPEAR $ PP ()} as string,",
				"          {KEY # ()} as string,",
				"          {KEY % ()} as string,",
				"          {KEY $ ()} as string,",
				"          {KEY $ PP ()} as string,",
				"          {RHT # ()} as string,",
				"          {RHT % ()} as string,",
				"          {RHT $ ()} as string,",
				"          {RHT $ PP ()} as string,",
				"          {DENT # ()} as string,",
				"          {DENT % ()} as string,",
				"          {DENT $ ()} as string,",
				"          {DENT $ PP ()} as string,",
				"          {KAHU/LOJACK # ()} as string,",
				"          {KAHU/LOJACK % ()} as string,",
				"          {KAHU/LOJACK $ ()} as string,",
				"          {KAHU/LOJACK $ PP ()} as string,",
				"          {AFTERMARKET # ()} as string,",
				"          {AFTERMARKET $ ()} as string,",
				"          {AFTERMARKET % ()} as string,",
				"          {AFTERMARKET $ PP ()} as string,",
				"          {F&I $ ()} as string,",
				"          {Back Gross $} as string,",
				"          {Avg Term ()} as string,",
				"          {Avg Payment ()} as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive(each(match(1==1), $$ = replace(trim($$), '$', ''))) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          Store as string,",
				"          {Deal No} as string,",
				"          {Deal Type} as string,",
				"          {Sale Type} as string,",
				"          Date as date,",
				"          Status as string,",
				"          Bank as string,",
				"          {Stock No} as string,",
				"          {Yr Make Model} as string,",
				"          Miles as decimal(18,2),",
				"          Customer as string,",
				"          {Sales ()} as decimal(18,2),",
				"          {Financed Amount ()} as decimal(18,2),",
				"          {RSV $ ()} as decimal(18,2),",
				"          {VSC # ()} as decimal(18,2),",
				"          {VSC % ()} as decimal(18,2),",
				"          {VSC $ ()} as decimal(18,2),",
				"          {VSC $ PP ()} as decimal(18,2),",
				"          {PPM # ()} as decimal(18,2),",
				"          {PPM % ()} as decimal(18,2),",
				"          {PPM $ ()} as decimal(18,2),",
				"          {PPM $ PP ()} as decimal(18,2),",
				"          {GAP # ()} as decimal(18,2),",
				"          {GAP $ ()} as decimal(18,2),",
				"          {GAP % ()} as decimal(18,2),",
				"          {GAP $ PP ()} as decimal(18,2),",
				"          {APPEAR # ()} as decimal(18,2),",
				"          {APPEAR $ ()} as decimal(18,2),",
				"          {APPEAR % ()} as decimal(18,2),",
				"          {APPEAR $ PP ()} as decimal(18,2),",
				"          {KEY # ()} as decimal(18,2),",
				"          {KEY % ()} as decimal(18,2),",
				"          {KEY $ ()} as decimal(18,2),",
				"          {KEY $ PP ()} as decimal(18,2),",
				"          {RHT # ()} as decimal(18,2),",
				"          {RHT % ()} as decimal(18,2),",
				"          {RHT $ ()} as decimal(18,2),",
				"          {RHT $ PP ()} as decimal(18,2),",
				"          {DENT # ()} as decimal(18,2),",
				"          {DENT % ()} as decimal(18,2),",
				"          {DENT $ ()} as decimal(18,2),",
				"          {DENT $ PP ()} as decimal(18,2),",
				"          {KAHU/LOJACK # ()} as decimal(18,2),",
				"          {KAHU/LOJACK % ()} as decimal(18,2),",
				"          {KAHU/LOJACK $ ()} as decimal(18,2),",
				"          {KAHU/LOJACK $ PP ()} as decimal(18,2),",
				"          {AFTERMARKET # ()} as decimal(18,2),",
				"          {AFTERMARKET $ ()} as decimal(18,2),",
				"          {AFTERMARKET % ()} as decimal(18,2),",
				"          {AFTERMARKET $ PP ()} as decimal(18,2),",
				"          {F&I $ ()} as decimal(18,2),",
				"          {Back Gross $} as decimal(18,2),",
				"          {Avg Term ()} as decimal(18,2),",
				"          {Avg Payment ()} as decimal(18,2)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     )) ~> sink1"
			]
		}
	}
}